var won = [4,7,6];
var utilities = [1, 6, 1];
var katie_util = [6,2,2,];
var params = utilities;
var bottle1 = [1500, false, false];
var bottle2 = [1150, false, true];
var bottle3 = [1150, false, false];
var bottle4 = [1200, true, true];
var bottle5 = [750, false, false];
var bottle6 = [700, true, true];
var bottle7 = [700, true, false];
var bottle8 = [700, false, true];
var allbottles = [bottle1,bottle2,bottle3,bottle4,bottle5,bottle6,bottle7,bottle8];

// given list of bottles of the form [1,3,6,7], returns all the other ones
var complete_partion = function(p){
  return filter(function(elt) {
    return !p.includes(elt);
  },
  [1,2,3,4,5,6,7,8]);
};

// utility of a bottle (list of attributes) with the given utilities (list of weights)
var util_f = function(bottle, utils) {
  // utility from volume
  var v_u = (bottle[0] - 700.0)/(1500-700) * (utils[0] - 1) + 1;
  // utility from opacity
  var o_u = bottle[1] ? utils[1] : 1;
  // utility from having water in it already
  var w_u = bottle[2] ? utils[2] : 1;
  return v_u + o_u + w_u;
};

// uses util_f to find the utility of a list of bottles
var util_many = function(bottles, utils){
  // note: [[1,2], [2,], [3,4]].reduce((a\, b) => a + b[0], 0) -> 6
  var sum_helper = function(b, s) {
    return s + util_f(b, utils)
  }
  var sum = reduce(sum_helper, 0, bottles);
  return sum;
}

// same things as util_many, but you pass just numbers instead of actual bottles
var util_many_lazy = function(bottlenums, utils){
  return util_many(map(function(n){
    return allbottles[n-1];
  }, bottlenums), utils);
}

// takes a list of bottles and a utility function with some number of 0s.
//  tests all values 1-7 for the 0s and prints them
var test_params = function(bottles, util) {
  var ranges0 = (util[0] < 1 ? [1,2,3,4,5,6,7] : [util[0],])
  var ranges1 = (util[1] < 1 ? [1,2,3,4,5,6,7] : [util[1],])
  var ranges2 = (util[2] < 1 ? [1,2,3,4,5,6,7] : [util[2],])
  map(function(u0){
    map(function(u1){
      map(function(u2){
        console.log([u0,u1,u2], " : ", util_many(bottles, [u0,u1,u2]));
      }, ranges2)
    }, ranges1)
  }, ranges0)
}

console.log(util_f(bottle3, utilities))

test_params(allbottles, params)

// console.log(util_many([bottle4,bottle5,bottle1,bottle2], utilities))
console.log(util_many_lazy(won, utilities))
console.log(util_many_lazy(complete_partion(won), katie_util))
