var won = [1,6,4,5];
var utilities =  [4, 2, 5];
var katie_util = [4, 2, 5];
var params = utilities;
var bottle1 = [1500, false, false];
var bottle2 = [1150, false, true];
var bottle3 = [1150, false, false];
var bottle4 = [1200, true, true];
var bottle5 = [750, false, false];
var bottle6 = [700, true, true];
var bottle7 = [700, true, false];
var bottle8 = [700, false, true];
var allbottles = [bottle1,bottle2,bottle3,bottle4,bottle5,bottle6,bottle7,bottle8];

var alpha = .8; // how much you change your bid based on your opponent (1 means copy theirs, 0 means don't care)

// given list of bottles of the form [1,3,6,7], returns all the other ones
var complete_partion = function(p){
  return filter(function(elt) {
    return !p.includes(elt);
  },
  [1,2,3,4,5,6,7,8]);
};

// utility of a bottle (list of attributes) with the given utilities (list of weights)
var util_f = function(bottle, utils) {
  // utility from volume
  var v_u = (bottle[0] - 700.0)/(1500-700) * (utils[0] - 1) + 1;
  // utility from opacity
  var o_u = bottle[1] ? utils[1] : 1;
  // utility from having water in it already
  var w_u = bottle[2] ? utils[2] : 1;
  return v_u + o_u + w_u;
};

// uses util_f to find the utility of a list of bottles
var util_many = function(bottles, utils) {
  // note: [[1,2], [2,], [3,4]].reduce((a\, b) => a + b[0], 0) -> 6
  var sum_helper = function(b, s) {
    return s + util_f(b, utils)
  }
  var su = reduce(sum_helper, 0, bottles);
  return su;
}

// same things as util_many, but you pass just numbers instead of actual bottles
var util_many_lazy = function(bottlenums, utils){
  return util_many(map(function(n){
    return allbottles[n-1];
  }, bottlenums), utils);
}

// takes a list of bottles and a utility function with some number of 0s.
//  tests all values 1-7 for the 0s and prints them
var test_params = function(bottles, util) {
  var ranges0 = (util[0] < 1 ? [1,2,3,4,5,6,7] : [util[0],])
  var ranges1 = (util[1] < 1 ? [1,2,3,4,5,6,7] : [util[1],])
  var ranges2 = (util[2] < 1 ? [1,2,3,4,5,6,7] : [util[2],])
  map(function(u0){
    map(function(u1){
      map(function(u2){
        console.log([u0,u1,u2], " : ", util_many(bottles, [u0,u1,u2]));
      }, ranges2)
    }, ranges1)
  }, ranges0)
}
// test_params(allbottles, params)

// get bid for first bottle in list, given your and your opponent's utilities
var get_bid = function(bottles_left, util, money, op_util, op_money, depth){
  // don't use this any more pls
  if (depth == 0){
    return money * util_f(bottles_left[0], util) / util_many(bottles_left, util);
  }
  // otherwise, the mean of that and what you think your opponent will bid
  return (1-alpha)*(money * util_f(bottles_left[0], util) / util_many(bottles_left, util))
          + alpha *(get_bid(bottles_left, op_util, op_money, util, money, depth-1));
}

var dumb_strat_generator = function(util){
  var dumb_strat = function(bids_so_far, bottles, money, op_money){
    return Categorical({vs: [20,], ps: [1,]})
  }
  return dumb_strat
}

var proportional_strat_generator = function(util){
  var prop_strat = function(bids_so_far, bottles, money, op_money){
    return Gaussian({
        mu: money * util_f(bottles[bids_so_far.length], util) / util_many(bottles.slice(bids_so_far.length), util),
        sigma: 4});
  }
  return prop_strat
}

// this works
var get_money_left = function(bids_so_far, starting_money, player_num/*1 or 2*/){
  return starting_money - sum(map(function(bb){
    return player_num == 1 ?
          (bb[1] >= bb[2] ? (bb[1] + bb[2]) / 2 : 0)
        : (bb[2] >  bb[1] ? (bb[1] + bb[2]) / 2 : 0);
  }, bids_so_far));
}

var perform_auction = function(bottles, starting_money, p1_action_fn, p2_action_fn){
  reduce(function(bottle, bids_so_far){
    var money = get_money_left(bids_so_far, starting_money, 1)
    var op_money = get_money_left(bids_so_far, starting_money, 2)
    var bid1 = _.min([sample(p1_action_fn(bids_so_far, bottles, money, op_money)), money])
    var bid2 = _.min([sample(p2_action_fn(bids_so_far, bottles, op_money, money)), op_money])
    return bids_so_far.concat([[bottles[0], bid1, bid2],])
  },
  [],
  bottles)
}

var dist = Infer({method:"MCMC", samples:50000}, function(){
  var util = [
    sample(Uniform({a:1, b:7})),
    sample(Uniform({a:1, b:7})),
    sample(Uniform({a:1, b:7})),
  ];
  // var util = [4,4,4];

  var bottles = _.shuffle(allbottles);

  // print(util)
  var money = 80;
  var op_util = [4,4,4];

  // this is a list of bottles and the amounts bid for them by each player
  // var bottlebids = perform_auction(allbottles, util, money, 1, op_util, op_money, 0)
  var bottlebids = perform_auction(allbottles, money, proportional_strat_generator(util), dumb_strat_generator(op_util))
  // from here on out I'm changing notation to p1 and p2 instead of _ and op

  var p1_max_util = util_many(bottles, util)
  var p2_max_util = util_many(bottles, op_util)

  var p1_util = util_many(map(function(bbb) {
      return bbb[0];
    },filter(function(bbb){
      return bbb[1] >= bbb[2];
    }, bottlebids)), util)

  var p2_util = util_many(map(function(bbb) {
      return bbb[0];
    },filter(function(bbb){
      return bbb[2] > bbb[1];
    }, bottlebids)), util)

  // print(p1_util, p2_util)

  // map(function(bb){
  //   var bottle = bb[0];
  //   var bid = bb[1];
  //   if (bottle[1]) {
  //     condition(bid > 10);
  //   }
  // }, bottlebids)
  // print(bottlebids)
  return p1_util// > 30
})


viz(dist)

// console.log(util_many_lazy(won, utilities))
// console.log(util_many_lazy(complete_partion(won), katie_util))
